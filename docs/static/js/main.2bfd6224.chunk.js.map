{"version":3,"sources":["components/input.jsx","components/results.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","onSubmit","this","handleSubmit","type","value","colorCount","onChange","onColorCountChange","colorlessCount","onColorlessCountChange","multicolorCount","onMulticolorCountChange","onClick","Component","Results","state","simulationNumber","results","whiteCount","blueCount","blackCount","redCount","greenCount","multicolorNum","colorlessNum","allColors","missTwo","fivePlus","sixPlus","App","handleColorCountChange","event","setState","target","handleColorlessCountChange","handleMulticolorCountChange","i","k","white","blue","black","red","green","multicolor","colorless","n","Math","ceil","random","parseInt","preventDefault","Fragment","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bfd6224.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Input extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <label>Cards per color</label>\r\n          <input\r\n            type=\"number\"\r\n            value={this.props.colorCount}\r\n            onChange={this.props.onColorCountChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Colorless Count</label>\r\n          <input\r\n            type=\"number\"\r\n            value={this.props.colorlessCount}\r\n            onChange={this.props.onColorlessCountChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Multicolour Count</label>\r\n          <input\r\n            type=\"number\"\r\n            value={this.props.multicolorCount}\r\n            onChange={this.props.onMulticolorCountChange}\r\n          />\r\n        </div>\r\n        <button onClick={this.props.onSubmit} type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Results extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>{this.props.simulationNumber} / 10000 Simulations</p>\r\n        <ul>\r\n          <li>\r\n            Percent of packs with a White card:{\" \"}\r\n            {this.props.results.whiteCount / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a Blue card:{\" \"}\r\n            {this.props.results.blueCount / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a Black card:{\" \"}\r\n            {this.props.results.blackCount / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a Red card:{\" \"}\r\n            {this.props.results.redCount / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a Green card:\r\n            {this.props.results.greenCount / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a MultiColor card:{\" \"}\r\n            {this.props.results.multicolorNum / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a Colorless card:{\" \"}\r\n            {this.props.results.colorlessNum / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with a card of each color:\r\n            {this.props.results.allColors / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs missing two or more colors:\r\n            {this.props.results.missTwo / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with five or more cards of a color:\r\n            {this.props.results.fivePlus / this.props.simulationNumber}%\r\n          </li>\r\n          <li>\r\n            Percent of packs with six or more cards of a color:\r\n            {this.props.results.sixPlus / this.props.simulationNumber}%\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./components/input\";\r\nimport Results from \"./components/results\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    colorCount: 0,\r\n    colorlessCount: 0,\r\n    multicolorCount: 0,\r\n    results: {\r\n      whiteCount: 0,\r\n      blueCount: 0,\r\n      blackCount: 0,\r\n      redCount: 0,\r\n      greenCount: 0,\r\n      multicolorNum: 0,\r\n      colorlessNum: 0,\r\n      allColors: 0,\r\n      missTwo: 0,\r\n      fivePlus: 0,\r\n      sixPlus: 0\r\n    },\r\n    simulationNumber: 0\r\n  };\r\n\r\n  handleColorCountChange = event => {\r\n    this.setState({\r\n      colorCount: event.target.value\r\n    });\r\n  };\r\n\r\n  handleColorlessCountChange = event => {\r\n    this.setState({\r\n      colorlessCount: event.target.value\r\n    });\r\n  };\r\n\r\n  handleMulticolorCountChange = event => {\r\n    this.setState({\r\n      multicolorCount: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    var i;\r\n    var k;\r\n    const results = {\r\n      whiteCount: 0,\r\n      blueCount: 0,\r\n      blackCount: 0,\r\n      redCount: 0,\r\n      greenCount: 0,\r\n      multicolorNum: 0,\r\n      colorlessNum: 0,\r\n      allColors: 0,\r\n      missTwo: 0,\r\n      fivePlus: 0,\r\n      sixPlus: 0\r\n    };\r\n    for (i = 1; i < 10001; i++) {\r\n      var white = 0;\r\n      var blue = 0;\r\n      var black = 0;\r\n      var red = 0;\r\n      var green = 0;\r\n      var multicolor = 0;\r\n      var colorless = 0;\r\n      for (k = 0; k < 15; k++) {\r\n        var n = Math.ceil(\r\n          Math.random() *\r\n            (this.state.colorCount * 5 +\r\n              parseInt(this.state.multicolorCount) +\r\n              parseInt(this.state.colorlessCount))\r\n        );\r\n        if (n <= this.state.colorCount) {\r\n          white++;\r\n        } else if (\r\n          n > this.state.colorCount &&\r\n          n <= this.state.colorCount * 2\r\n        ) {\r\n          blue++;\r\n        } else if (\r\n          n > this.state.colorCount * 2 &&\r\n          n <= this.state.colorCount * 3\r\n        ) {\r\n          black++;\r\n        } else if (\r\n          n > this.state.colorCount * 3 &&\r\n          n <= this.state.colorCount * 4\r\n        ) {\r\n          red++;\r\n        } else if (\r\n          n > this.state.colorCount * 4 &&\r\n          n <= this.state.colorCount * 5\r\n        ) {\r\n          green++;\r\n        } else if (\r\n          n > this.state.colorCount * 5 &&\r\n          n <= this.state.colorCount * 5 + parseInt(this.state.multicolorCount)\r\n        ) {\r\n          multicolor++;\r\n        } else {\r\n          colorless++;\r\n        }\r\n      }\r\n\r\n      if (white > 0) {\r\n        results.whiteCount++;\r\n      }\r\n      if (blue > 0) {\r\n        results.blueCount++;\r\n      }\r\n      if (black > 0) {\r\n        results.blackCount++;\r\n      }\r\n      if (red > 0) {\r\n        results.redCount++;\r\n      }\r\n      if (green > 0) {\r\n        results.greenCount++;\r\n      }\r\n      if (colorless > 0) {\r\n        results.colorlessNum++;\r\n      }\r\n      if (multicolor > 0) {\r\n        results.multicolorNum++;\r\n      }\r\n      if (white > 0 && blue > 0 && black > 0 && red > 0 && green > 0) {\r\n        results.allColors++;\r\n      }\r\n      if (\r\n        (white == 0 && blue == 0) ||\r\n        (white == 0 && black == 0) ||\r\n        (white == 0 && red == 0) ||\r\n        (white == 0 && green == 0) ||\r\n        (blue == 0 && black == 0) ||\r\n        (blue == 0 && red == 0) ||\r\n        (blue == 0 && green == 0) ||\r\n        (black == 0 && red == 0) ||\r\n        (black == 0 && green == 0) ||\r\n        (red == 0 && green == 0)\r\n      ) {\r\n        results.missTwo++;\r\n      }\r\n      if (white > 4 || blue > 4 || black > 4 || red > 4 || green > 4) {\r\n        results.fivePlus++;\r\n      }\r\n      if (white > 5 || blue > 5 || black > 5 || red > 5 || green > 5) {\r\n        results.sixPlus++;\r\n      }\r\n\r\n      this.setState({ simulationNumber: i });\r\n    }\r\n\r\n    this.setState({ results: results });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <main className=\"container\">\r\n          <Input\r\n            colorCount={this.state.colorCount}\r\n            colorlessCount={this.state.colorlessCount}\r\n            multicolorCount={this.state.multicolorCount}\r\n            onColorCountChange={this.handleColorCountChange}\r\n            onColorlessCountChange={this.handleColorlessCountChange}\r\n            onMulticolorCountChange={this.handleMulticolorCountChange}\r\n            onSubmit={this.handleSubmit}\r\n          />\r\n          <div>\r\n            <Results\r\n              results={this.state.results}\r\n              simulationNumber={this.state.simulationNumber}\r\n            />\r\n          </div>\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}